<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>松</title>
  
  <subtitle>松</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-09-24T15:54:06.509Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Song</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/09/23/test/"/>
    <id>http://example.com/2022/09/23/test/</id>
    <published>2022-09-23T14:42:24.208Z</published>
    <updated>2022-09-24T15:54:06.509Z</updated>
    
    <content type="html"><![CDATA[<p>测试文档111</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;测试文档111&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/07/12/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://example.com/2022/07/12/%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2022-07-12T14:24:29.622Z</published>
    <updated>2022-07-28T14:16:14.591Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><p>1.spring中的@Autowired和@Resource的区别<br>    @Autowired是由spring提供的，可以对构造方法，成员变量以及方法参数上进行标注，可以根据对象类型进行自动注入<br>    @Resource  作用和Autowired差不多，但是适用与所有的java框架，支持对象类型的注入，也支持对象名称的注入<br>@Autowired和@Resource的区别<br>   1.@Autowired内部只有1个required参数   默认为true,表示开启默认注入，@Resource包含7个参数 主要一个是名字name 和type<br>   2.@Autowired 支持优先注入，可以配置运行bean不存在<br>   3.@Autowired按byType自动注入，而@Resource默认按 byName自动注入。<br>2.spring的循环依赖 </p><p>3.spring ioc </p><p>ioc 启动的时候就把所有的类创建到容器中，需要使用的时候通过注解去调用</p><p>4.aop工作</p><p>1日志，2.返回值</p><p>5.spingboot和springcloud的区别</p><p>springboot：相当于一个独立的，可以直接打包成jar进行运行的，简化了平时开发，比如ssm需要手动引入一些配置文件，</p><p>springcloud: springcloud的相当于一个生态，将srpingboot开发的一个个单体进行整合管理起来。包含一些注册中心，网关，熔断 hyginx sentinel 这些</p><p>6.注册中心</p><p>7.熔断降级</p><p>熔断   配置了一个错误率 50%  10个请求超过了错误率就会进行熔断， 或者说是服务器报错了，熔断了以后</p><p>8.hystrix线程池</p><p>9.网关 zuul-&gt;gateway</p><p>gateway 线程模型  </p><p>为什么用gateway</p><p> 没有用网关，一个服务一个ip 相当于对网关进行整合，只用调用一个就行，也可以做一些鉴权 ，做一个限流，超过1000 就直接关了  </p><p>10.sentinel底层算法</p><p>限流的算法，5000个请求放到mq里面 进行一个匀速的传输，</p><p>11.线程池</p><p>12.mq数据量比较大，怎么保证消息不丢失</p><p>13.spring事务没生效</p><p>13.用的设计模式</p><p>14.八种数据类型</p><p>15.包装类 integer  1000 和int  1000  是不是相等 </p><p>16.equip 和 == 的区别</p><p>String s = null;<br>　　会抛出NullPointerException异常的有(A,C)。[两项]</p><p>　　A) if( (s!=null) &amp; (s.length()&gt;0) )</p><p>　　B) if( (s!=null) &amp; &amp; (s.length()&gt;0) )</p><p>　　C) if( (s==null) | (s.length()==0) )</p><p>　　D) if( (s==null) || (s.length()==0) )</p><p>17.索引理解<br>sql优化的时候 建立一个索引-&gt;执行效率变快-&gt;<br>索引：数据库表的目录<br>hash索引  </p><p>java 8 链表转换成一个树</p><p>有序数组<br>可以用二分 查得很快<br>但是crud很快，但是数据量很大的  就需要批量处理，速度不快</p><p>avl树 平衡树<br>左右 子树 不能相差1-》自旋 浪费性能</p><p>红黑树<br>红黑，但是不能村存很多</p><p>b+树  log n 复杂度<br>节点存储多个值  索引就是存在磁盘里面，</p><p>主键 id自增<br>避免分裂</p><p>18.bean是怎么注入的</p><p>19.try catch是干嘛的怎么实现的</p><p>throw可以抛异常 Error，Throwable，Exception，RuntimeException 但是Event和Object不能抛出<br>以下对异常的描述不正确的有(C)</p><p>　　A) 异常分为Error和Exception</p><p>　　B) Throwable是所有异常类的父类</p><p>　　C) Exception是所有异常类父类</p><p>　　D) Exception包括RuntimeException和RuntimeException之外的异常<br>在try-catch-finally语句块中，以下可以单独与finally一起使用的是( try)</p><p>　　24. 以下描述不正确的有(D)</p><p>　　A) try块不可以省略</p><p>　　B) 可以使用多重catch块</p><p>　　C) finally块可以省略</p><p>　　D) catch块和finally块可以同时省略</p><p>20.list arrlist 能不能被实例</p><p>1、ArrayList的实现是基于数组，LinkedList的实现是基于双向链表。</p><p>2、对于随机访问，ArrayList优于LinkedList</p><p>3、对于插入和删除操作，LinkedList优于ArrayList</p><p>4、LinkedList比ArrayList更占内存，因为LinkedList的节点除了存储数据，还存储了两个引用，一个指向前一个元素，一个指向后一个元素。</p><p>LinkedList继承AbstractSequentialList类 实现了List接口</p><p>AbstractSet继承AbstractCollection类    实现了Set接口，</p><p>WeakHashMap 继承AbstractMap类   实现了Map接口</p><p>HashSet继承AbstractSet类              实现了Set接口。</p><p>21.aop的业务，干了什么</p><p>22.大杯子33l  小杯子5l 要得到7L的水</p><p>   用小杯子的倍数不断去取余  5*5-33=2l    2+5=7l</p><p>23.抽象类和接口的区别</p><p>抽象类和方法 就 是以<strong>abstract修饰的方法和类</strong></p><p>1.抽象类中可以有普通成员变量，接口中没有普通成员变量</p><p>2.抽象类可以有构造方法，接口中不能有构造方法</p><p>3.抽象类中可以包含静态方法，接口中不能包含静态方法</p><p>4.抽象类中的抽象方法的访问类型可以是 public，protected ,但接口中的抽象方法只能是 public 类型的，并且默认即为 public abstract 类型</p><p>5.一个类可以实现多个接口，但只能继承一个抽象类。</p><p>6.抽象类和接口中都可以包含静态成员变量，抽象类中的静态成员变量的访问类型可以任意，但接口中定义的变量只是public static final 类型，并且默认即为 public static final 类型。</p><p> 24.怎么把字符串反转</p><p>​    abcde 反转成edcba</p><p>1.字符串反转函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// StringBuffer</span><br><span class="line">public static String reverse1(String str) &#123;</span><br><span class="line">  return new StringBuilder(str).reverse().toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.一个一个进行反转</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// toCharArray</span><br><span class="line">public static String reverse2(String str) &#123;</span><br><span class="line">  char[] chars = str.toCharArray();</span><br><span class="line">  String reverse = &quot;&quot;;</span><br><span class="line">  for (int i = chars.length - 1; i &gt;= 0; i--) &#123;</span><br><span class="line">    reverse += chars[i];</span><br><span class="line">  &#125;</span><br><span class="line">  return reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.直接从中间移动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public static String reverse(String s) &#123;</span><br><span class="line">    char[] chars = s.toCharArray();</span><br><span class="line">    for (int i = 0; i &lt; chars.length / 2; i++) &#123;</span><br><span class="line">      char temp = chars[i];</span><br><span class="line">      chars[i] = chars[chars.length - 1 -i];</span><br><span class="line">      chars[chars.length - 1 - i] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    return String.valueOf(chars);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p> 25.sql语句练习</p><p>name   kecheng   fenshu<br>张三     语文       81<br>张三     数学       75<br>李四     语文       76<br>李四     数学       90<br>王五     语文       81<br>王五     数学       100<br>王五     英语       90<br>————————————————</p><p>1.查询每门课都大于  80分的姓名()</p><p>select   distinct  name from test where name not in（select distinct name from score where score&lt;=80）</p><p> 2.按总成绩来排名 输出名字和总成绩</p><p>select name, dense_rank() over (order by Score desc) as ‘Rank’ from Scores</p><p>26.重写和重载的区别</p><p>子类继承父类，对他原来的方法进行改写，重载就是定义了不同的方法，函数名相同，只是参数列表不同，</p><p>27.继承，封装，多态<br>继承：子类继承父类，实现父类中的属性和方法，<br>封装：把一些操作封装成一个方法，实现代码的复用<br>多态：继承之间的关系调用，通过调用不同的子类对象完成不同的功能<br>条件有3个： 1.继承 2.重写 3.子类可以赋给父类引用 </p><p>28.序列化和反序列化<br>序列化：把Java对象转换为字节序列的过程。<br>反序列：把字节序列恢复为Java对象的过程。<br>序列化是什么：java对象是在JVM中生成的，是内存中的数据，如果需要把对象的字节序列远程传输或保存到硬盘上时，<br>你就需要将Java对象转换成二进制流。 这个转换过程就是序列化。 假如别人传给你一个二进制流数据，<br>当你想要恢复成内存中的对象时，你就需要反序列化<br> 序列化的原因：网络通信时，无论是何种类型的数据，都会转成字节序列的形式在网络上传送。<br>发送方需要把这个Java对象转换为字节序列，才能在网络上传送；接收方则需要把字节序列再恢复为Java对象。<br>就比把对象封装成json格式(字符流)<br> 实现序列化： Serializable    Externalizable</p><p>redis的5种类型<br>string hash list set zset有序集合</p><p>怎么实现sentinel<br>通过阿里云的sentinel,<br>1.直接增加流控规则 超过多少就直接把他关了<br>2.增加关联模型 当关联的资源达到阀值的时候就限流自己   就可以避免一大串的请求导致服务雪崩 ，影响后面的请求<br>3.预热  直接升 1s 10w可能把系统直接干没，设置流控 让他20s缓冲期， 预热到100 每秒3(默认冷加载因子) 100/3<br>降级规则(熔断)<br>热点规则（热点参数限流）<br>根据热点带来的参数进行限流，找到关键字testHotKey  如果违背了就走blockHandler 相当于一个兜底方法，<br>自定义限流处理创建一个CustomerBlockHandler按照自定义兜底方法的来进行解耦</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;面试题&quot;&gt;&lt;a href=&quot;#面试题&quot; class=&quot;headerlink&quot; title=&quot;面试题&quot;&gt;&lt;/a&gt;面试题&lt;/h1&gt;&lt;p&gt;1.spring中的@Autowired和@Resource的区别&lt;br&gt;    @Autowired是由spring提供的，可以对</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>PBE对称加密</title>
    <link href="http://example.com/2022/03/12/PBE%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/"/>
    <id>http://example.com/2022/03/12/PBE%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/</id>
    <published>2022-03-12T03:38:26.000Z</published>
    <updated>2022-07-12T11:48:00.476Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PBE对称加密"><a href="#PBE对称加密" class="headerlink" title="PBE对称加密"></a>PBE对称加密</h1><h3 id="PBE"><a href="#PBE" class="headerlink" title="PBE"></a>PBE</h3><p>​    PBE算法是一种基于口令的加密算法，其特点在于口令是由用户自己掌握的，采用随机数杂凑多重加密等方法保证数据的安全性。 既然PBE算法使用我们较为常用的对称加密算法，那就无法回避密钥的问题。口令并不能替代密钥，密钥是经过加密算法计算得来的，但是口令本身不可能很长看，单纯的口令很容易通过穷举攻击方式破译，这就引入了“盐”。盐能阻止字典攻击或预先计算的攻击，它本身是一个随机信息，相同的随机信息极不可能使用两次。将盐附加在口令上，通过消息摘要算法经过迭代计算获得构建密钥/初始化向量的基本材料，使得破译的难度加大。</p><p><img src="http://uploadphoto.oys68.cn/photo/iYbVchZDyNxse1waKMAJazgs936TAm6u4Vj49ede.png" alt="img"></p><ol><li><pre><code>  由消息传递双方约定口令，这里由甲方构建口令。</code></pre></li><li><pre><code>  由口令构建者发布口令，即本系统的服务器将口令发送给系统的客户端使用者</code></pre></li><li><pre><code>  由口令构建者构建本次消息传递使用的盐，这里由甲方（本系统）构建盐</code></pre></li><li><pre><code>  由消息发送方使用口令、盐对数据加密，这里由甲方对数据加密</code></pre></li><li><pre><code>  由消息发送者将盐、加密数据放松给消息接收者，这里由甲方将盐、加密数据发送给乙方</code></pre></li><li><pre><code>  由消息接收方使用盐、口令对加密数据解密，这里由乙方完成数据解密</code></pre></li></ol><h6 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">import com.it.result.CommonResult;</span><br><span class="line">import com.it.service.DataImplService;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private DataImplService dataImplService;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/insert&quot;)</span><br><span class="line">    public CommonResult insert(@RequestParam String data,</span><br><span class="line">                                 @RequestParam String password) &#123;</span><br><span class="line">        return dataImplService.insert(data,password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/output1&quot;)</span><br><span class="line">    public CommonResult output(@RequestParam String data,</span><br><span class="line">                               @RequestParam String password</span><br><span class="line">    ) &#123;</span><br><span class="line">        return dataImplService.output1(data,password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/alloutput&quot;)</span><br><span class="line">    public CommonResult alloutput(@RequestBody Map map) &#123;</span><br><span class="line">        return dataImplService.alloutput(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="service层"><a href="#service层" class="headerlink" title="service层"></a>service层</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import com.it.result.CommonResult;</span><br><span class="line"></span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">public interface DataImplService &#123;</span><br><span class="line"></span><br><span class="line">    CommonResult insert(String data,String password);</span><br><span class="line"></span><br><span class="line">    CommonResult output1(String data, String password);</span><br><span class="line"></span><br><span class="line">    CommonResult alloutput(Map map);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="service层实现类"><a href="#service层实现类" class="headerlink" title="service层实现类"></a>service层实现类</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Base64;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">import com.it.mapper.DataMapper;</span><br><span class="line">import com.it.result.CommonResult;</span><br><span class="line">import com.it.service.DataImplService;</span><br><span class="line">import com.it.util.PBE;</span><br><span class="line">import lombok.SneakyThrows;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class DataServiceImpl implements DataImplService &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private DataMapper dataMapper;</span><br><span class="line"></span><br><span class="line">    // 加密</span><br><span class="line">    @SneakyThrows</span><br><span class="line">    @Override</span><br><span class="line">    public CommonResult insert(String data, String password) &#123;</span><br><span class="line">        byte[] input = data.getBytes();</span><br><span class="line">        // 初始化盐</span><br><span class="line">        byte[] salt = PBE.initSalt();</span><br><span class="line">        // 加密</span><br><span class="line">        byte[] data1 = PBE.encrypt(input, password, salt);</span><br><span class="line">        System.err.println(&quot;加密后data字符串\t&quot; + Base64.getEncoder().encodeToString(data1));</span><br><span class="line">        byte[] output = PBE.decrypt(data1,password,salt);</span><br><span class="line">        String outputStr = new String(output);</span><br><span class="line">        System.err.println(&quot;加密后字符串\t&quot; + outputStr);</span><br><span class="line">        dataMapper.addData(data,Base64.getEncoder().encodeToString(data1),password,Base64.getEncoder().encodeToString(salt));</span><br><span class="line">        return new CommonResult&lt;&gt;(200, &quot;加密成功&quot;,Base64.getEncoder().encodeToString(data1));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 解密</span><br><span class="line">    @SneakyThrows</span><br><span class="line">    public CommonResult output1(String data, String password) &#123;</span><br><span class="line">        String salt=dataMapper.selectSalt(data,password);</span><br><span class="line">        if(salt == null || salt == &quot;&quot;)</span><br><span class="line">        &#123;</span><br><span class="line">            return new CommonResult&lt;&gt;(500, &quot;解密失败&quot;,&quot;密码或密钥错误&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        byte[] data1 = Base64.getDecoder().decode(data);</span><br><span class="line">        byte[] salt1 = Base64.getDecoder().decode(salt);</span><br><span class="line">        byte[] output = PBE.decrypt(data1,password,salt1);</span><br><span class="line">        String outputStr = new String(output);</span><br><span class="line">        return new CommonResult&lt;&gt;(200, &quot;解密成功&quot;,outputStr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 解密</span><br><span class="line">    @SneakyThrows</span><br><span class="line">    @Override</span><br><span class="line">    public CommonResult alloutput(Map map) &#123;</span><br><span class="line">        List&lt;String&gt; list = (List) map.get(&quot;list&quot;);</span><br><span class="line">        ArrayList&lt;String&gt; arr = new ArrayList&lt;String&gt; ();</span><br><span class="line">        for (int i = 0; i &lt; list.size(); i++) &#123;</span><br><span class="line">            Object lo = list.get(i);</span><br><span class="line">            Map entry = (Map) lo;</span><br><span class="line">            String data = (String) entry.get(&quot;data&quot;);</span><br><span class="line">            String password = (String) entry.get(&quot;password&quot;);</span><br><span class="line">          //  System.out.println(data + &quot; &quot; + password);</span><br><span class="line">            String salt = dataMapper.selectSalt(data, password);</span><br><span class="line">            System.out.println(salt);</span><br><span class="line">            if (salt == null || salt == &quot;&quot;) &#123;</span><br><span class="line">                return new CommonResult&lt;&gt;(500, &quot;解密失败,密钥或密文错误&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            byte[] data1 = Base64.getDecoder().decode(data);</span><br><span class="line">            byte[] salt1 = Base64.getDecoder().decode(salt);</span><br><span class="line">            byte[] output = PBE.decrypt(data1, password, salt1);</span><br><span class="line">            String outputStr = new String(output);</span><br><span class="line">            arr.add(outputStr);</span><br><span class="line">        &#125;</span><br><span class="line">        return new CommonResult&lt;&gt;(200, &quot;解密成功&quot;,arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="dao层"><a href="#dao层" class="headerlink" title="dao层"></a>dao层</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.ibatis.annotations.Mapper;</span><br><span class="line">import org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line">@Mapper</span><br><span class="line">@Repository</span><br><span class="line">public interface DataMapper &#123;</span><br><span class="line"></span><br><span class="line">   void addData(String text, String data, String password, String salt);</span><br><span class="line"></span><br><span class="line">   String selectSalt(String data, String password);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="xml"><a href="#xml" class="headerlink" title="xml"></a>xml</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.it.mapper.DataMapper&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=&quot;selectSalt&quot; resultType=&quot;String&quot; &gt;</span><br><span class="line">        select  salt from data where data=#&#123;data&#125; and password=#&#123;password&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;insert id=&quot;addData&quot; parameterType=&quot;Data&quot;&gt;</span><br><span class="line">        insert into data (text,data,password,salt) values(#&#123;text&#125;,#&#123;data&#125;,#&#123;password&#125;,#&#123;salt&#125;)</span><br><span class="line">    &lt;/insert&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><p>具体可以访问链接</p><p><a href="https://github.com/song-ouyang/springboot-PBE">song-ouyang/springboot-PBE: 一个基于springboot的PBE加密 (github.com)</a></p>]]></content>
    
    
    <summary type="html">搭建的一个小的PBE对称加密</summary>
    
    
    
    <category term="小组件" scheme="http://example.com/categories/%E5%B0%8F%E7%BB%84%E4%BB%B6/"/>
    
    <category term="工具" scheme="http://example.com/categories/%E5%B0%8F%E7%BB%84%E4%BB%B6/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="工具" scheme="http://example.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="JAVA" scheme="http://example.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>图床搭建</title>
    <link href="http://example.com/2021/10/22/%E8%87%AA%E5%88%B6%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/"/>
    <id>http://example.com/2021/10/22/%E8%87%AA%E5%88%B6%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/</id>
    <published>2021-10-22T07:54:44.000Z</published>
    <updated>2022-07-12T11:48:15.789Z</updated>
    
    <content type="html"><![CDATA[<h1 id="图床搭建"><a href="#图床搭建" class="headerlink" title="图床搭建"></a>图床搭建</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>由于每次电脑上都要配置图床，太麻烦了，所以就干脆自己搭建一个图床来方便自己使用，直接将自己的图片放置在阿里云的oss上，随取随用，方便快捷，永久存储.</p><h3 id="演示网站"><a href="#演示网站" class="headerlink" title="演示网站"></a>演示网站</h3><p>photo.oys68.cn</p><h3 id="技术和配置"><a href="#技术和配置" class="headerlink" title="技术和配置"></a>技术和配置</h3><p>前端：html+js</p><p>后端：springboot+oss</p><p>前端代码：<a href="https://github.com/song-ouyang/photo-up-html">song-ouyang/photo-up-html: 图床的前端页面 (github.com)</a></p><p>后端Controller代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@RequestMapping(&quot;/uploadFilesOSS&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">UploadFile</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String endpoint = <span class="string">&quot;oss-accelerate.aliyuncs.com&quot;</span>;</span><br><span class="line">        String accessKeyId = <span class="string">&quot;xxxxxxxxxxx&quot;</span>;</span><br><span class="line">        String accessKeySecret = <span class="string">&quot;xxxxxxxxxxxxx&quot;</span>;</span><br><span class="line">        String bucketName = <span class="string">&quot;test-oys&quot;</span>;</span><br><span class="line">        String fileName=file.getOriginalFilename();</span><br><span class="line">      <span class="comment">//  System.out.println(fileName);</span></span><br><span class="line">       <span class="comment">//生成随机名</span></span><br><span class="line">      <span class="comment">//  fileName = &quot;oys_&quot; + new Date().getTime() +        fileName.substring(fileName.lastIndexOf(&quot;.&quot;));</span></span><br><span class="line">       String objectName = <span class="string">&quot;JAVA-OSS/&quot;</span>+fileName;</span><br><span class="line">       <span class="comment">// System.out.println(objectName);</span></span><br><span class="line">        <span class="comment">// 创建OSSClient实例。</span></span><br><span class="line">        OSS ossClient = <span class="keyword">new</span> OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建InitiateMultipartUploadRequest对象。</span></span><br><span class="line">        InitiateMultipartUploadRequest request = <span class="keyword">new</span> InitiateMultipartUploadRequest(bucketName, objectName);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果需要在初始化分片时设置文件存储类型，请参考以下示例代码。</span></span><br><span class="line"><span class="comment">// ObjectMetadata metadata = new ObjectMetadata();</span></span><br><span class="line"><span class="comment">// metadata.setHeader(OSSHeaders.OSS_STORAGE_CLASS, StorageClass.Standard.toString());</span></span><br><span class="line"><span class="comment">// request.setObjectMetadata(metadata);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化分片。</span></span><br><span class="line">        InitiateMultipartUploadResult upresult = ossClient.initiateMultipartUpload(request);</span><br><span class="line"><span class="comment">// 返回uploadId，它是分片上传事件的唯一标识。您可以根据该uploadId发起相关的操作，例如取消分片上传、查询分片上传等。</span></span><br><span class="line">        String uploadId = upresult.getUploadId();</span><br><span class="line"></span><br><span class="line"><span class="comment">// partETags是PartETag的集合。PartETag由分片的ETag和分片号组成。</span></span><br><span class="line">        List&lt;PartETag&gt; partETags =  <span class="keyword">new</span> ArrayList&lt;PartETag&gt;();</span><br><span class="line"><span class="comment">// 每个分片的大小，用于计算文件有多少个分片。单位为字节。</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> partSize = <span class="number">100</span> * <span class="number">1024</span> * <span class="number">1024L</span>;   <span class="comment">//1 MB。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 填写本地文件的完整路径。如果未指定本地路径，则默认从示例程序所属项目对应本地路径中上传文件。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//    final File sampleFile = new File(&quot;F:\\Download\\bbb.mp4&quot;);</span></span><br><span class="line">        <span class="keyword">long</span> fileLength =file.getSize();</span><br><span class="line">        <span class="keyword">int</span> partCount = (<span class="keyword">int</span>) (fileLength / partSize);</span><br><span class="line">        <span class="keyword">if</span> (fileLength % partSize != <span class="number">0</span>) &#123;</span><br><span class="line">            partCount++;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 遍历分片上传。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; partCount; i++) &#123;</span><br><span class="line">            <span class="keyword">long</span> startPos = i * partSize;</span><br><span class="line">            <span class="keyword">long</span> curPartSize = (i + <span class="number">1</span> == partCount) ? (fileLength - startPos) : partSize;</span><br><span class="line">            InputStream instream = file.getInputStream();</span><br><span class="line">            <span class="comment">// 跳过已经上传的分片。</span></span><br><span class="line">            instream.skip(startPos);</span><br><span class="line">            UploadPartRequest uploadPartRequest = <span class="keyword">new</span> UploadPartRequest();</span><br><span class="line">            uploadPartRequest.setBucketName(bucketName);</span><br><span class="line">            uploadPartRequest.setKey(objectName);</span><br><span class="line">            uploadPartRequest.setUploadId(uploadId);</span><br><span class="line">            uploadPartRequest.setInputStream(instream);</span><br><span class="line">            <span class="comment">// 设置分片大小。除了最后一个分片没有大小限制，其他的分片最小为100 KB。</span></span><br><span class="line">            uploadPartRequest.setPartSize(curPartSize);</span><br><span class="line">            <span class="comment">// 设置分片号。每一个上传的分片都有一个分片号，取值范围是1~10000，如果超出此范围，OSS将返回InvalidArgument错误码。</span></span><br><span class="line">            uploadPartRequest.setPartNumber( i + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 每个分片不需要按顺序上传，甚至可以在不同客户端上传，OSS会按照分片号排序组成完整的文件。</span></span><br><span class="line">            UploadPartResult uploadPartResult = ossClient.uploadPart(uploadPartRequest);</span><br><span class="line">            <span class="comment">// 每次上传分片之后，OSS的返回结果包含PartETag。PartETag将被保存在partETags中。</span></span><br><span class="line">            partETags.add(uploadPartResult.getPartETag());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建CompleteMultipartUploadRequest对象。</span></span><br><span class="line"><span class="comment">// 在执行完成分片上传操作时，需要提供所有有效的partETags。OSS收到提交的partETags后，会逐一验证每个分片的有效性。当所有的数据分片验证通过后，OSS将把这些分片组合成一个完整的文件。</span></span><br><span class="line">        CompleteMultipartUploadRequest completeMultipartUploadRequest =</span><br><span class="line">                <span class="keyword">new</span> CompleteMultipartUploadRequest(bucketName, objectName, uploadId, partETags);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果需要在完成文件上传的同时设置文件访问权限，请参考以下示例代码。</span></span><br><span class="line"> completeMultipartUploadRequest.setObjectACL(CannedAccessControlList.PublicRead);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 完成上传。</span></span><br><span class="line">        CompleteMultipartUploadResult completeMultipartUploadResult = ossClient.completeMultipartUpload(completeMultipartUploadRequest);</span><br><span class="line">     System.out.println(completeMultipartUploadResult.getLocation());</span><br><span class="line"><span class="comment">// 关闭OSSClient。</span></span><br><span class="line">        ossClient.shutdown();</span><br><span class="line">        <span class="keyword">if</span> (completeMultipartUploadResult.getLocation()!=<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="number">200</span>, <span class="string">&quot;上传成功&quot;</span>,completeMultipartUploadResult.getLocation());</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="number">100</span>, <span class="string">&quot;上传失败&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">搭建的一个小的应用工具</summary>
    
    
    
    <category term="小组件" scheme="http://example.com/categories/%E5%B0%8F%E7%BB%84%E4%BB%B6/"/>
    
    <category term="工具" scheme="http://example.com/categories/%E5%B0%8F%E7%BB%84%E4%BB%B6/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="工具" scheme="http://example.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="JAVA" scheme="http://example.com/tags/JAVA/"/>
    
  </entry>
  
</feed>
